# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

# Do not run when PR is created - only after it is merged into one of these branches
# main branch is prod
on:
  push:
    branches:
      - main
      - stage

permissions:
  contents: read

jobs:
  # First Job: Deploy EKS Cluster
  terraform-eks-cluster:
    name: 'Terraform: EKS Cluster (${{ github.ref_name }})'
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'stage'

    environment: ${{ github.ref_name == 'stage' && 'stage' || github.ref_name == 'main' && 'prod' || 'unknown' }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/eks-cluster

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Ensure workspace exists
        run: |
          if ! terraform workspace list | grep -q "${{ github.ref_name }}"; then
            terraform workspace new "${{ github.ref_name }}"
          fi

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.ref_name }}

      - name: Terraform Plan
        run: terraform plan -var-file=environment/${{ github.ref_name }}.tfvars

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=environment/${{ github.ref_name }}.tfvars

  # Second Job: Deploy Load Balancer Controller
  # Runs sequentially because we needed the first job to create the cluster IAM access entry first
  # so we can deploy to the Kubernetes cluster
  terraform-lb-controller:
    name: 'Terraform: Load Balancer Controller (${{ github.ref_name }})'
    runs-on: ubuntu-latest
    needs: terraform-eks-cluster  # Waits for EKS deployment to complete
    if: github.ref_name == 'main' || github.ref_name == 'stage'

    environment: ${{ github.ref_name == 'stage' && 'stage' || github.ref_name == 'main' && 'prod' || 'unknown' }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/lb-controller

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Ensure workspace exists
        run: |
          if ! terraform workspace list | grep -q "${{ github.ref_name }}"; then
            terraform workspace new "${{ github.ref_name }}"
          fi

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.ref_name }}

      - name: Terraform Plan
        run: terraform plan -var-file=environment/${{ github.ref_name }}.tfvars

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=environment/${{ github.ref_name }}.tfvars

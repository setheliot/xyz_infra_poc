# This workflow deploys the EKS infrastructure
# It first deploys the EKS cluster
# Then it installs the AWS Load Balancer Controller

name: 'Terraform'

# Do not run when PR is created - only after it is merged into one of these branches
# main branch is prod
on:
  push:
    branches:
      - main
      - stage

permissions:
  contents: read

jobs:

  #
  # Job 1: Create IAM policy, if it does not already exist
  terraform-iam-policy:
    name: 'Terraform: IAM resources (${{ github.ref_name }})'
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'stage'

    environment: ${{ github.ref_name == 'stage' && 'stage' || github.ref_name == 'main' && 'prod' || 'unknown' }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/iam

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Check if AWSLoadBalancerControllerIAMPolicy exists and set an output
      - name: Check for AWSLoadBalancerControllerIAMPolicy
        id: check_policy
        run: |
          if aws iam get-policy --policy-arn arn:aws:iam::$(aws sts get-caller-identity --query "Account" --output text):policy/AWSLoadBalancerControllerIAMPolicy > /dev/null 2>&1; then
            echo "AWSLoadBalancerControllerIAMPolicy exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "AWSLoadBalancerControllerIAMPolicy does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        if: steps.check_policy.outputs.exists == 'false'
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        if: steps.check_policy.outputs.exists == 'false'
        run: terraform init

      - name: Terraform Format
        if: steps.check_policy.outputs.exists == 'false'
        run: terraform fmt -check -recursive

      - name: Ensure workspace exists
        if: steps.check_policy.outputs.exists == 'false'
        run: |
          if ! terraform workspace list | grep -q "${{ github.ref_name }}"; then
            terraform workspace new "${{ github.ref_name }}"
          fi

      - name: Select Terraform Workspace
        if: steps.check_policy.outputs.exists == 'false'
        run: terraform workspace select ${{ github.ref_name }}

      - name: Terraform Plan
        if: steps.check_policy.outputs.exists == 'false'
        run: terraform plan

      - name: Terraform Apply
        if: github.event_name == 'push' && steps.check_policy.outputs.exists == 'false'
        run: terraform apply -auto-approve



  # Job 2: Deploy EKS Cluster
  terraform-eks-cluster:
    name: 'Terraform: EKS Cluster (${{ github.ref_name }})'
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'stage'

    environment: ${{ github.ref_name == 'stage' && 'stage' || github.ref_name == 'main' && 'prod' || 'unknown' }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/eks-cluster

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Ensure workspace exists
        run: |
          if ! terraform workspace list | grep -q "${{ github.ref_name }}"; then
            terraform workspace new "${{ github.ref_name }}"
          fi

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.ref_name }}

      - name: Terraform Plan
        run: terraform plan -var-file=environment/${{ github.ref_name }}.tfvars

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=environment/${{ github.ref_name }}.tfvars

  # Job 3: Deploy Load Balancer Controller
  # Runs sequentially because we needed the first job to create the cluster IAM access entry first
  # so we can deploy to the Kubernetes cluster
  terraform-lb-controller:
    name: 'Terraform: Load Balancer Controller (${{ github.ref_name }})'
    runs-on: ubuntu-latest
    needs: terraform-eks-cluster  # Waits for EKS deployment to complete
    if: github.ref_name == 'main' || github.ref_name == 'stage'

    environment: ${{ github.ref_name == 'stage' && 'stage' || github.ref_name == 'main' && 'prod' || 'unknown' }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/lb-controller

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Ensure workspace exists
        run: |
          if ! terraform workspace list | grep -q "${{ github.ref_name }}"; then
            terraform workspace new "${{ github.ref_name }}"
          fi

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.ref_name }}

      - name: Terraform Plan
        run: terraform plan -var-file=environment/${{ github.ref_name }}.tfvars

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=environment/${{ github.ref_name }}.tfvars
